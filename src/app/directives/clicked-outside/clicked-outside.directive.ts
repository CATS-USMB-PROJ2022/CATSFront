import {AfterViewInit, Directive, ElementRef, EventEmitter, Inject, OnDestroy, Output} from "@angular/core";
import {DOCUMENT} from "@angular/common";
import {filter, fromEvent, Subscription} from "rxjs";

@Directive({
  selector: '[clickOutside]'
})
export class ClickOutsideDirective implements AfterViewInit, OnDestroy {
  /////////////////////////////////////////////////////////////////////////////////////////////////
  // Attributs ////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////
  @Output() clickOutside = new EventEmitter<void>;

  onClicDocument: Subscription | undefined;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  // Constructeurs ////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////
  constructor(private element: ElementRef, @Inject(DOCUMENT) private document: Document) { }

  ngAfterViewInit() {
    this.onClicDocument = fromEvent(this.document, 'click')
                                      .pipe(filter((event) => !this.isDansDocument(event.target as HTMLElement)))
                                      .subscribe(() => this.clickOutside.emit());
  }

  ngOnDestroy() { this.onClicDocument?.unsubscribe(); }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  // MÃ©thodes /////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////
  isDansDocument(element: HTMLElement): boolean { return element === this.element.nativeElement || this.element.nativeElement.contains(element); }
}
